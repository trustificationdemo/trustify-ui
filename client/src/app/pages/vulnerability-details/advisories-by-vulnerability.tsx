import type React from "react";

import type { AxiosError } from "axios";

import { Toolbar, ToolbarContent, ToolbarItem } from "@patternfly/react-core";
import { Table, Tbody, Td, Th, Thead, Tr } from "@patternfly/react-table";
import { Link } from "react-router-dom";

import { extendedSeverityFromSeverity } from "@app/api/models";
import type { VulnerabilityAdvisorySummary } from "@app/client";
import { FilterToolbar, FilterType } from "@app/components/FilterToolbar";
import { SeverityShieldAndText } from "@app/components/SeverityShieldAndText";
import { SimplePagination } from "@app/components/SimplePagination";
import {
  ConditionalTableBody,
  TableHeaderContentWithControls,
} from "@app/components/TableControls";
import { useLocalTableControls } from "@app/hooks/table-controls";
import { formatDate } from "@app/utils/utils";

interface AdvisoriesByVulnerabilityProps {
  isFetching: boolean;
  fetchError?: AxiosError;
  advisories: VulnerabilityAdvisorySummary[];
}

export const AdvisoriesByVulnerability: React.FC<
  AdvisoriesByVulnerabilityProps
> = ({ advisories }) => {
  const tableControls = useLocalTableControls({
    tableName: "advisory-table",
    idProperty: "uuid",
    items: advisories,
    isLoading: false,
    columnNames: {
      identifier: "ID",
      title: "Title",
      severity: "Aggregated Severity",
      type: "Type",
      revision: "Revision",
      vulnerabilities: "Vulnerabilities",
    },
    hasActionsColumn: false,
    isSortEnabled: false,
    isPaginationEnabled: true,
    initialItemsPerPage: 10,
    isFilterEnabled: true,
    filterCategories: [
      {
        categoryKey: "filterText",
        title: "Filter text",
        placeholderText: "Search",
        type: FilterType.search,
        getItemValue: (item) => item.identifier ?? "",
      },
    ],
  });

  const {
    currentPageItems,
    numRenderedColumns,
    propHelpers: {
      toolbarProps,
      filterToolbarProps,
      paginationToolbarItemProps,
      paginationProps,
      tableProps,
      getThProps,
      getTrProps,
      getTdProps,
    },
  } = tableControls;

  return (
    <>
      {tableControls.isFilterEnabled && (
        <Toolbar {...toolbarProps}>
          <ToolbarContent>
            <FilterToolbar showFiltersSideBySide {...filterToolbarProps} />
            <ToolbarItem {...paginationToolbarItemProps}>
              <SimplePagination
                idPrefix="advisory-table"
                isTop
                paginationProps={paginationProps}
              />
            </ToolbarItem>
          </ToolbarContent>
        </Toolbar>
      )}
      <Table {...tableProps} aria-label="Advisory table">
        <Thead>
          <Tr>
            <TableHeaderContentWithControls {...tableControls}>
              <Th {...getThProps({ columnKey: "identifier" })} />
              <Th {...getThProps({ columnKey: "title" })} />
              <Th {...getThProps({ columnKey: "severity" })} />
              <Th {...getThProps({ columnKey: "type" })} />
              <Th {...getThProps({ columnKey: "revision" })} />
              <Th {...getThProps({ columnKey: "vulnerabilities" })} />
            </TableHeaderContentWithControls>
          </Tr>
        </Thead>
        <ConditionalTableBody
          isLoading={false}
          isError={undefined}
          isNoData={advisories.length === 0}
          numRenderedColumns={numRenderedColumns}
        >
          <Tbody>
            {currentPageItems?.map((item) => {
              return (
                <Tr key={item.identifier} {...getTrProps({ item })}>
                  <Td
                    width={15}
                    modifier="breakWord"
                    {...getTdProps({ columnKey: "identifier" })}
                  >
                    <Link to={`/advisories/${item.uuid}`}>
                      {item.document_id}
                    </Link>
                  </Td>
                  <Td
                    width={45}
                    modifier="truncate"
                    {...getTdProps({ columnKey: "title" })}
                  >
                    {item.title}
                  </Td>
                  <Td width={10} {...getTdProps({ columnKey: "severity" })}>
                    <SeverityShieldAndText
                      value={extendedSeverityFromSeverity(item.severity)}
                      score={item.score}
                      showLabel
                      showScore
                    />
                  </Td>
                  <Td
                    width={10}
                    modifier="truncate"
                    {...getTdProps({ columnKey: "type" })}
                  >
                    {item.labels.type}
                  </Td>
                  <Td
                    width={10}
                    modifier="truncate"
                    {...getTdProps({ columnKey: "revision" })}
                  >
                    {formatDate(item.modified)}
                  </Td>
                  <Td
                    width={10}
                    modifier="truncate"
                    {...getTdProps({ columnKey: "vulnerabilities" })}
                  >
                    {item.number_of_vulnerabilities}
                  </Td>
                </Tr>
              );
            })}
          </Tbody>
        </ConditionalTableBody>
      </Table>
      <SimplePagination
        idPrefix="advisory-table"
        isTop={false}
        paginationProps={paginationProps}
      />
    </>
  );
};
