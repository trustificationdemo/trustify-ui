import React from "react";
import { Link } from "react-router-dom";

import dayjs from "dayjs";

import { Toolbar, ToolbarContent, ToolbarItem } from "@patternfly/react-core";
import {
  ExpandableRowContent,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tr,
} from "@patternfly/react-table";

import type { DecomposedPurl } from "@app/api/models";
import type { PurlSummary } from "@app/client";
import { FilterType } from "@app/components/FilterToolbar";
import { PackageQualifiers } from "@app/components/PackageQualifiers";
import { SimplePagination } from "@app/components/SimplePagination";
import {
  ConditionalTableBody,
  TableHeaderContentWithControls,
  TableRowContentWithControls,
} from "@app/components/TableControls";
import { VulnerabilityStatusLabel } from "@app/components/VulnerabilityStatusLabel";
import {
  type SbomOfVulnerability,
  useSbomsOfVulnerability,
} from "@app/hooks/domain-controls/useSbomsOfVulnerability";
import { useLocalTableControls } from "@app/hooks/table-controls";
import { useWithUiId } from "@app/utils/query-utils";
import { decomposePurl, formatDate } from "@app/utils/utils";

type PurlData = {
  purlSummary: PurlSummary;
  decomposedPurl?: DecomposedPurl;
};

type TableData = SbomOfVulnerability & {
  allUniquePackages: PurlData[];
};

interface SbomsByVulnerabilityProps {
  vulnerabilityId: string;
}

export const SbomsByVulnerability: React.FC<SbomsByVulnerabilityProps> = ({
  vulnerabilityId,
}) => {
  const {
    data: { sboms },
    isFetching,
    fetchError,
  } = useSbomsOfVulnerability(vulnerabilityId);

  const tableData = React.useMemo(() => {
    return sboms.map((item) => {
      const allUniquePackages = item.relatedPackages
        .flatMap((relatedPackages) => relatedPackages.packages)
        .reduce((prev, current) => {
          const existingElement = prev.find((e) => e.uuid === current.uuid);
          return existingElement ? prev : [...prev.slice(), current];
        }, new Array<PurlSummary>())
        .map((purlSummary) => {
          const decomposedPurl = decomposePurl(purlSummary.purl);
          const result: PurlData = {
            purlSummary,
            decomposedPurl,
          };
          return result;
        });

      const result: TableData = {
        ...item,
        allUniquePackages,
      };
      return result;
    });
  }, [sboms]);

  const tableDataWithUiId = useWithUiId(
    tableData,
    (d) => `${d.sbom.id}-${d.sbomStatus}`,
  );

  const tableControls = useLocalTableControls({
    tableName: "sboms-table",
    idProperty: "_ui_unique_id",
    items: tableDataWithUiId,
    isLoading: isFetching,
    columnNames: {
      name: "Name",
      version: "Version",
      status: "Status",
      dependencies: "Dependencies",
      supplier: "Supplier",
      created: "Created on",
    },
    hasActionsColumn: false,
    isSortEnabled: true,
    sortableColumns: ["name", "dependencies", "created"],
    getSortValues: (item) => ({
      name: item.sbom.name,
      dependencies: item.sbom.number_of_packages,
      created: item.sbom?.published ? dayjs(item.sbom.published).valueOf() : 0,
    }),
    isPaginationEnabled: true,
    isFilterEnabled: true,
    filterCategories: [
      {
        categoryKey: "filterText",
        title: "Filter text",
        placeholderText: "Search",
        type: FilterType.search,
        getItemValue: (item) => item.sbom?.name ?? "",
      },
    ],
    isExpansionEnabled: true,
    expandableVariant: "compound",
  });

  const {
    currentPageItems,
    numRenderedColumns,
    propHelpers: {
      toolbarProps,
      paginationToolbarItemProps,
      paginationProps,
      tableProps,
      getThProps,
      getTrProps,
      getTdProps,
      getExpandedContentTdProps,
    },
    expansionDerivedState: { isCellExpanded },
  } = tableControls;

  return (
    <>
      {tableControls.isFilterEnabled && (
        <Toolbar {...toolbarProps}>
          <ToolbarContent>
            <ToolbarItem {...paginationToolbarItemProps}>
              <SimplePagination
                idPrefix="sbom-table"
                isTop
                paginationProps={paginationProps}
              />
            </ToolbarItem>
          </ToolbarContent>
        </Toolbar>
      )}

      <Table {...tableProps} aria-label="Sbom table">
        <Thead>
          <Tr>
            <TableHeaderContentWithControls {...tableControls}>
              <Th {...getThProps({ columnKey: "name" })} />
              <Th {...getThProps({ columnKey: "version" })} />
              <Th {...getThProps({ columnKey: "status" })} />
              <Th {...getThProps({ columnKey: "dependencies" })} />
              <Th {...getThProps({ columnKey: "supplier" })} />
              <Th {...getThProps({ columnKey: "created" })} />
            </TableHeaderContentWithControls>
          </Tr>
        </Thead>
        <ConditionalTableBody
          isLoading={isFetching}
          isError={!!fetchError}
          isNoData={tableDataWithUiId.length === 0}
          numRenderedColumns={numRenderedColumns}
        >
          {currentPageItems?.map((item, rowIndex) => {
            return (
              <Tbody key={item._ui_unique_id} isExpanded={isCellExpanded(item)}>
                <Tr {...getTrProps({ item })}>
                  <TableRowContentWithControls
                    {...tableControls}
                    item={item}
                    rowIndex={rowIndex}
                  >
                    <Td
                      width={25}
                      modifier="breakWord"
                      {...getTdProps({ columnKey: "name" })}
                    >
                      <Link to={`/sboms/${item.sbom.id}`}>
                        {item?.sbom?.name}
                      </Link>
                    </Td>
                    <Td
                      width={10}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "version" })}
                    >
                      {item.sbom?.version}
                    </Td>
                    <Td width={10} {...getTdProps({ columnKey: "status" })}>
                      <VulnerabilityStatusLabel value={item.sbomStatus} />
                    </Td>
                    <Td
                      width={10}
                      {...getTdProps({
                        columnKey: "dependencies",
                        isCompoundExpandToggle: true,
                        item: item,
                        rowIndex,
                      })}
                    >
                      {item.allUniquePackages.length}
                    </Td>
                    <Td
                      width={10}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "supplier" })}
                    >
                      {item?.sbom?.suppliers.join(", ")}
                    </Td>
                    <Td
                      width={10}
                      modifier="truncate"
                      {...getTdProps({ columnKey: "created" })}
                    >
                      {formatDate(item.sbom?.published)}
                    </Td>
                  </TableRowContentWithControls>
                </Tr>
                {isCellExpanded(item) ? (
                  <Tr isExpanded>
                    <Td
                      {...getExpandedContentTdProps({
                        item,
                      })}
                    >
                      <ExpandableRowContent>
                        {isCellExpanded(item, "dependencies") ? (
                          <>
                            <Table variant="compact">
                              <Thead>
                                <Tr>
                                  <Th>Type</Th>
                                  <Th>Namespace</Th>
                                  <Th>Name</Th>
                                  <Th>Version</Th>
                                  <Th>Path</Th>
                                  <Th>Qualifiers</Th>
                                </Tr>
                              </Thead>
                              <Tbody>
                                {item.allUniquePackages.map((purl) => {
                                  return (
                                    <Tr key={purl.purlSummary.uuid}>
                                      <Td>{purl.decomposedPurl?.type}</Td>
                                      <Td>{purl.decomposedPurl?.namespace}</Td>
                                      <Td>
                                        <Link
                                          to={`/packages/${purl.purlSummary.uuid}`}
                                        >
                                          {purl.decomposedPurl?.name}
                                        </Link>
                                      </Td>
                                      <Td>{purl.decomposedPurl?.version}</Td>
                                      <Td>{purl.decomposedPurl?.path}</Td>
                                      <Td>
                                        {purl.decomposedPurl?.qualifiers && (
                                          <PackageQualifiers
                                            value={
                                              purl.decomposedPurl?.qualifiers
                                            }
                                          />
                                        )}
                                      </Td>
                                    </Tr>
                                  );
                                })}
                              </Tbody>
                            </Table>
                          </>
                        ) : null}
                      </ExpandableRowContent>
                    </Td>
                  </Tr>
                ) : null}
              </Tbody>
            );
          })}
        </ConditionalTableBody>
      </Table>
      <SimplePagination
        idPrefix="sboms-table"
        isTop={false}
        paginationProps={paginationProps}
      />
    </>
  );
};
